type_specifier : INT 
Line# 1: Token <ID> Lexeme foo found
Line# 1: Token <LPAREN> Lexeme ( found
type_specifier : INT 
Line# 1: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 1: Token <RPAREN> Lexeme ) found
Line# 1: Token <LCURL> Lexeme { found
Line# 2: Token <LPAREN> Lexeme ( found
Line# 2: Token <ID> Lexeme a found
Line# 2: Token <RELOP> Lexeme == found
variable : id
factor : variable
unary_expression : factor
term : unary_expression
Line# 2: simple_expression : term
Line# 2: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 2: Token <RPAREN> Lexeme ) found
Line# 2: simple_expression : term
rel_expression : simple_expression RELOP simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 2: Token <LCURL> Lexeme { found
Line# 3: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 3: Token <SEMICOLON> Lexeme ; found
Line# 3: simple_expression : term
Line# 3: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statement
Line# 4: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL

	ScopeTable# 3
	ScopeTable# 2
	10--> <a,int> 
	ScopeTable# 1
	6--> <foo,int> 

statement : compound_statement
statement : IF LPAREN expression RPAREN statement
statements : statement
Line# 5: Token <ID> Lexeme foo found
Line# 5: Token <LPAREN> Lexeme ( found
Line# 5: Token <ID> Lexeme a found
Line# 5: Token <ADDOP> Lexeme - found
variable : id
factor : variable
unary_expression : factor
term : unary_expression
Line# 5: simple_expression : term
Line# 5: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 5: Token <RPAREN> Lexeme ) found
simple_expression : simple_expression ADDOP term
Line# 5: rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
argument_list : arguments
Line# 393573712: factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 5: Token <MULOP> Lexeme * found
Line# 5: Token <ID> Lexeme a found
Line# 5: Token <SEMICOLON> Lexeme ; found
variable : id
factor : variable
unary_expression : factor
term : term MULOP unary_expression
Line# 5: simple_expression : term
Line# 5: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statements statement
Line# 6: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL

	ScopeTable# 2
	10--> <a,int> 
	ScopeTable# 1
	6--> <foo,int> 

ˆ­ôUfunc_definition :type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition
program : unit
type_specifier : INT 
Line# 9: Token <ID> Lexeme main found
Line# 9: Token <LPAREN> Lexeme ( found
Line# 9: Token <RPAREN> Lexeme ) found
Line# 9: Token <LCURL> Lexeme { found
type_specifier : INT 
Line# 10: Token <ID> Lexeme i found
Line# 10: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 10: Token <ID> Lexeme j found
Line# 10: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 10: Token <ID> Lexeme k found
Line# 10: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration: type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statement
Line# 11: Token <ID> Lexeme i found
Line# 11: Token <ASSIGNOP> Lexeme = found
variable : id
Line# 11: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 11: Token <SEMICOLON> Lexeme ; found
Line# 11: simple_expression : term
Line# 11: rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
Line# 11: expression_statement : expression SEMICOLON
i=7;
statement : expression_statement
statements : statements statement
Line# 12: Token <ID> Lexeme j found
Line# 12: Token <ASSIGNOP> Lexeme = found
variable : id
Line# 12: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 12: Token <SEMICOLON> Lexeme ; found
Line# 12: simple_expression : term
Line# 12: rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
Line# 12: expression_statement : expression SEMICOLON
j=3;
statement : expression_statement
statements : statements statement
Line# 14: Token <ID> Lexeme k found
Line# 14: Token <ASSIGNOP> Lexeme = found
variable : id
Line# 14: Token <ID> Lexeme foo found
Line# 14: Token <LPAREN> Lexeme ( found
Line# 14: Token <ID> Lexeme i found
Line# 14: Token <RPAREN> Lexeme ) found
variable : id
factor : variable
unary_expression : factor
term : unary_expression
Line# 14: simple_expression : term
Line# 14: rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
argument_list : arguments
Line# 393573712: factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 14: Token <SEMICOLON> Lexeme ; found
Line# 14: simple_expression : term
Line# 14: rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
Line# 14: expression_statement : expression SEMICOLON
k=foo((i));
statement : expression_statement
statements : statements statement
Line# 15: Token <LPAREN> Lexeme ( found
Line# 15: Token <ID> Lexeme k found
Line# 15: Token <RPAREN> Lexeme ) found
Line# 15: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 17: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 17: Token <SEMICOLON> Lexeme ; found
Line# 17: simple_expression : term
Line# 17: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statements statement
Line# 18: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL

	ScopeTable# 4
	7--> <i,int> 
	8--> <j,int> 
	9--> <k,int> 
	ScopeTable# 1
	2--> <main,int> 
	6--> <foo,int> 

ð¬®ôUfunc_definition :type_specifier ID LPAREN RPAREN compound_statement 
unit : func_definition
program : program unit
start : program
